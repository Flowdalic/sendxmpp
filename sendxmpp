#!/usr/bin/env amm
// SPDX-License-Identifier: GPL-3.0-or-later
// Copyright Â© 2020-2021 Florian Schmaus

import $ivy.`org.igniterealtime.smack:smack-java8-full:4.4.4`
import $ivy.`dev.dirs:directories:26`

import scala.io.Source

import java.io.File

import org.jxmpp.jid.impl.JidCreate

import org.jivesoftware.smack.tcp.XMPPTCPConnection
import org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration

import dev.dirs.ProjectDirectories

// Initialize Smack and then remove the BC provider, as it causes
// issues on certain Java versions.
// TODO: Remove this once sendxmpp uses Smack 4.5 or later.
org.jivesoftware.smack.SmackConfiguration.getVersion()
// Remove the BC provider after Smack was initialized.
java.security.Security.removeProvider("BC")

@main(doc ="Send an XMPP message to the provided recipient. Positional arguments are possible: the first is the XMPP address (JID) of the recipient, the second is the XMPP message (or '-' for stdin)")
def send(
  @arg(doc ="The XMPP address (JID) of the recipient") recipient: String,
  @arg(doc ="The message to send. Use '-' to read message from standard input (stdin)") message: String,
  @arg(doc ="(Optional) The file with the XMPP credentials. First line must contain the JID, the second line the password.  Default: ~/.config/sendxmpp/credentials") credfile: String = "auto"
	) {
  val recipientJid = JidCreate.from(recipient)

  val projectDirectories = ProjectDirectories.from(
    "eu.geekplace", "Geekplace", "sendxmpp"
  )
  val configDir = new File(projectDirectories.configDir)
  val credfile = new File(configDir, "credentials")

  if (!credfile.isFile) {
    System.err.println(s"No credentials file found at ${credfile}")
    System.exit(1)
  }

  val credfileLines = Source.fromFile(credfile).getLines
  val myJid = JidCreate.entityBareFrom(credfileLines.next)
  val password = credfileLines.next

  val messageBody =
    if (message == "-")
      Source.fromInputStream(System.in).mkString
    else message

  val config = XMPPTCPConnectionConfiguration.builder()
    .setXmppAddressAndPassword(myJid, password)
    .build()

  val connection = new XMPPTCPConnection(config)

  val messageStanza = connection.getStanzaFactory
    .buildMessageStanza
    .to(recipientJid)
    .setBody(messageBody)
    .build

  try {
    connection.connect.login

    connection.sendStanza(messageStanza)
  } finally {
    connection.disconnect
  }
}
